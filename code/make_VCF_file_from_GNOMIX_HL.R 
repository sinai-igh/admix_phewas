#this script converts a GNOMIX .msp file for a given chromosome to .vcf file format for use with SAIGE
# this script is for converting three-way local ancestry calls
#Author Sinead Cullina
#command line arguments
args <- commandArgs(TRUE)  
infile=args[1]  # GNOMIX output
position_info= args[2]  # positions file in the format of VCF file (see notes)
chr= args[3]  # chr number

# Load library
library(data.table)

# Read input files
data_file = fread(infile)  # Read genomic data file into a data.table
positions_file = fread(position_info) 
positions_file$FORMAT = "GT"  # Add FORMAT column with fixed value "GT" to mimic VCF

# Initialize an empty dataframe to hold output file
output_df <- data.frame()

i = 1  #counter
# Loop through each position in positions_file
for (entry in 1:nrow(positions_file)){
  pos = as.numeric(positions_file[entry,][,2])  # Extract position
  pos_output = data_file[(data_file$spos <= pos) & (data_file$epos >= pos),]  # Filter row where pos falls within spos and epos of GNOMIX file
  output_df  <- rbind(output_df, pos_output)  # Append filtered results
  i = i+1
}

# Remove first six columns from output_df
output_df = output_df[,-c(1:6)]

# pull list of unique sample names
sample_order = unique(sapply(strsplit(colnames(output_df),"\\."), `[`, 1))

# Create an empty matrix for storing phased LAI calls
matrix_holder = matrix(nrow = nrow(output_df), ncol = (ncol(output_df)/2))
i = 1

# Convert phased LAI data into "x|y" format pulling local ancestry calls for each haplotype per individual
for (j in seq(2, ncol(output_df), 2)){
  col1 = colnames(output_df)[j-1]
  col2 = colnames(output_df)[j]
  matrix_holder[,i] = paste(output_df[[col1]] ,"|", output_df[[col2]], sep= "")
  i = i+1
}

# Convert matrix to dataframe
matrix_holder = as.data.frame(matrix_holder)

# ---- Ancestry 0 Conversion ----
matrix_holder_anc0 <- data.frame(lapply(matrix_holder, function(x) {
  gsub("0", "3", x)  # Temporarily replace 0 with 3
}))

matrix_holder_anc0 <- data.frame(lapply(matrix_holder_anc0, function(x) {
  gsub("2", "0", x)  # Convert 2 to 0
}))

matrix_holder_anc0 <- data.frame(lapply(matrix_holder_anc0, function(x) {
  gsub("1", "0", x)  # Convert 1 to 0
}))

matrix_holder_anc0 <- data.frame(lapply(matrix_holder_anc0, function(x) {
  gsub("3", "1", x)  # Convert temporary 3 back to 1
}))

# Add sample order as column names
colnames(matrix_holder_anc0) = sample_order
# Merge with positions_file and write to VCF format
matrix_holder_anc0 = cbind(positions_file, matrix_holder_anc0)
write.table(matrix_holder_anc0, paste("chr", chr, "_ancestry_0.vcf", sep= ""), quote= F, sep= "\t", row.names = F)

# ---- Ancestry 1 Conversion ----
matrix_holder_anc1 <- data.frame(lapply(matrix_holder, function(x) {
  gsub("2", "0", x)  # Convert 2 to 0
}))

colnames(matrix_holder_anc1) = sample_order
matrix_holder_anc1 = cbind(positions_file, matrix_holder_anc1)
write.table(matrix_holder_anc1, paste("chr", chr, "_ancestry_1.vcf", sep= ""), quote= F, sep= "\t", row.names = F)

# ---- Ancestry 2 Conversion ----
matrix_holder_anc2 <- data.frame(lapply(matrix_holder, function(x) {
  gsub("1", "0", x)  # Convert 1 to 0
}))

matrix_holder_anc2 <- data.frame(lapply(matrix_holder_anc2, function(x) {
  gsub("2", "1", x)  # Convert 2 to 1
}))

colnames(matrix_holder_anc2) = sample_order
matrix_holder_anc2 = cbind(positions_file, matrix_holder_anc2)

write.table(matrix_holder_anc2, paste("chr", chr, "_ancestry_2.vcf", sep= ""), quote= F, sep= "\t", row.names = F)
